//------------------------------------
//    $Typography
//------------------------------------

 // CONTENTS
 // INTRODUCTION.........How the type system works.
 // VARIABLES............Your settings.
 // SETUP................Silent classes and functions.
 // BASE.................Additional normalization for HTML and BODY
 // HEADINGS.............Create the headings with modular scale or pre-defined sizes
 // LISTS................Add typographic rhythm principles to lists.
 // PARAGRAPHS...........Paragraph, and paragraph-like elements.
 // QUOTES...............Blockquote styling.
 // NORMALIZE............Type-specific definitions pulled from normalize.css.


//------------------------------------\\
//    $INTRODUCTION
//------------------------------------\\

// Based on https://github.com/csswizardry/typecsset;
// A small, unopinionated library for creating beautifully set type
// on the web. Typecsset gives perfect vertical rhythm at any configurable font
// size, as well as many other typographical niceties.



//------------------------------------\\
//    $VARIABLES
//------------------------------------\\

//!!!! NOTE: All of the real variables are in /utilities/_variables.scss \\
//!!!! What follows is just for reference. !!!!! \\

// What would you like your base font-size to be? Define in pixels; the library
// will convert measurements to the most appropriate units (rems or unitless).
//$base-font-size:      14px !default;
//$base-line-height:    22px !default;

// Heading sizes if you'd rather set them yourself (set $auto-scale-type to false).
//$type-h1-size:             50px !default;
//$type-h2-size:             44px !default;
//$type-h3-size:             33px !default;
//$type-h4-size:             22px !default;
//$type-h5-size:             21px !default;
//$type-h6-size:             18px !default;

// Would you like indented (rather than spaced) paragraph delimiting?
//$indented-paragraphs: false !default;

// Set the ratio by which your type should grow.
// Accepts two numbers, representing a ratio, typically associated with
// music intervals. You may also use floats (1.33).
// Common intervals: Perfect fourth (4,3)[default], Perfect Fifth (3,2),
// Perfect Octave (2,1), Major Third (5,4), Major Sixth (5,3).
// The Golden Ratio is (1.618,1).
//$scale-ratio:               4,3   !default;

// Would you like to show a baseline grid? This is handy during development.
//$show-baseline:       false !default;




/*-----------------------------------
    $SETUP
------------------------------------*/

// Just here for reference.
// Real functions live within utilities/_functions.scss

// @mixin type-font-size($font-size, $line-height: true) {
//    font-size: $font-size;
//    font-size: ($font-size / $typecsset-base-font-size) * 1rem;

//    @if $line-height == true {
//        line-height: ceil($font-size / $typecsset-base-line-height) * ($typecsset-base-line-height / $font-size);
//    }
//
// }

// A small, internally-used function to remove the units from a given value.
// @function typecsset-strip-units($number) {
//    @return $number / ($number * 0 + 1);
// }

%type_vertical_rhythm {
    padding: 0;
	margin-top: 0;
    margin-bottom: $type-magic-number;
    margin-bottom: $type-magic-ratio * 1rem;
}
%type_space_v{
	@include type-space(margin-bottom, 1);
}


//-----------------------------------
//    $BASE
//------------------------------------
html {
	@extend %space_reset;
	font-size: $base-font-size / 16px * 1em;
	@include media(smalls){
		font-size: .85em;
	}
	@include media(lap){
		font-size: .9em;
	}
		
    -ms-text-size-adjust: 100%;
    -webkit-text-size-adjust: 100%;
	font-family: $primary-font-stack;

// If you have chosen to display a baseline grid, we turn it on here.
   @if $show-baseline == true {
        $type-baseline-size: strip-units($type-magic-number);
        &.baseline-on{
			background-image: url(http://basehold.it/i/#{$type-baseline-size}); // [3]
			background-image: linear-gradient(to top, rgba(0, 0, 0, .15) 1px, transparent 1px) 0 0 / auto $type-magic-ratio * 1em;
        }
    }
}
body, .p{
    @include type-font-size($base-font-size, true, p);
    @extend %space_reset;
	color: color(text);
}
body{
	padding-top: 0;
}

//Allow a toggle for baseline image
@if $show-baseline == true {
    .baseline-off{
        background-image:none;
    }
}

%type_family_secondary{
    font-family: $secondary_font_stack;
}
%type_family_primary{
    font-family: $primary_font_stack;
}
%type_family_icon{
    font-family: $icon_font_stack;
}
// Create vertical rhythms that are more appropriate for headings inside text blocks.
// Adds 2/3 of the vertical rhythm to the top and 1/3 to bottom so headings appear
// closer to their sibling paragraphs. Creates better proximity.
%vertical_rhythm_headings{
    padding: 0;
    margin-bottom: $type_magic_number * .5;
    margin-bottom: ($type_magic_ratio * .5) * 1rem;
    margin-top: $type_magic_number * -.25;
    margin-top: ($type_magic_ratio * -.25) * 1rem;
}

//------------------------------------
//    $HEADINGS
//------------------------------------

@if $auto_scale_type == true {
	@include headings(1,6){
		margin-top: 0;
		padding-bottom:0;
	}
    @include headings_scale($scale_ratio);
}
@else{
    h1, %h1{
		font-weight: 200;
		@extend %type_vertical_rhythm;
        @include type_font_size($type_h1_size);
		@extend %type_family_secondary;
    }
    @if $type_scale_classes == true{
        .h1{
            @extend %h1;
        }
    }
    h2, %h2 {
		@extend %type_vertical_rhythm;
        @include type_font_size($type_h2_size);
    }
    @if $type_scale_classes == true{
        .h2{
            @extend %h2;
			@extend %type_family_primary;
        }
    }
    h3, %h3 {
		font-weight: 400;
		@extend %type_vertical_rhythm;
        @include type_font_size($type_h3_size);
		@extend %type_family_secondary;
    }
    @if $type_scale_classes == true{
        .h3{
            @extend %h3;
        }
    }
    h4, %h4 {
		@extend %type_vertical_rhythm;
        @include type_font_size($type_h4_size);
		@extend %type_family_secondary;
    }
    @if $type_scale_classes == true{
        .h4{
            @extend %h4;
        }
    }
    h5, %h5 {
		@extend %type_vertical_rhythm;
        @include type_font_size($type_h5_size);
    }
    @if $type_scale_classes == true{
        .h5{
            @extend %h5;
			@extend %type_family_primary;
        }
    }
    h6, %h6 {
		@extend %type_vertical_rhythm;
        @include type_font_size($type_h6_size);
    }
    @if $type_scale_classes == true{
        .h6{
            @extend %h6;
			@extend %type_family_primary;
        }
    }
    h1,h2,h3,h4,h5,h6{
        & + p{
            @include type-space(margin-top, -1);
        }
    }
}

//-------------------------------
//   $LISTS
//-------------------------------
ul, ol, dd, menu {
    @extend %type_vertical_rhythm;
    @extend %space_l;
}

li > ul,
li > ol {
    @extend %space_n_v;
}





//-------------------------------
//    $PARAGRAPHS
//-------------------------------
p, .p {
	@extend %type_vertical_rhythm;

    @if $indented-paragraphs == true {

        & + & {
            @include type-space(text-indent);
            @extend %space_negative;
        }

    }

}

//
// Not strictly a paragraph, but probably doesn’t need its own section.
//
address {
    @extend %type_vertical_rhythm;
}


pre {
    @extend %type_vertical_rhythm;
    white-space: pre;
    white-space: pre-wrap;
    word-wrap: break-word;
    overflow: auto;
}


// 1. Fix an odd quirk whereby, without this, code blocks are rendered at a
//    font-size smaller than 1em.

code,
kbd,
pre,
samp {
    font-family: $monospace-font-stack;
    _font-family: 'courier new', monospace;
    font-size: 1em; // [1]
}

/*Address styling not present in IE 7/8/9, Safari 5, and Chrome.*/

abbr[title] {
    border-bottom: 1px dotted;
}




/*-------------------------------
    $QUOTES
-------------------------------*/
//
// 1. Hang the opening quote of the blockquote.
//
blockquote {
    text-indent: -0.41em; // [1]
}

blockquote {
    @extend %type_vertical_rhythm;
    quotes: '“' '”';
    @extend %space_l;

    p {
        &:before {
            content: "“";
            content: open-quote;
        }

        &:after {
            content: "";
            content: no-close-quote;
        }

        &:last-of-type:after {
            content: "”";
            content: close-quote;
        }

    }

}

q   {
    quotes: "‘" "’" "“" "”";
    overflow: visible;

    &:before {
        content: "‘";
        content: open-quote;
    }

    &:after {
        content: "’";
        content: close-quote;
    }

    q:before {
        content: "“";
        content: open-quote;
    }

    q:after{
        content: "”";
        content: close-quote;
    }

    //
    // If an element opens with an inline quote, let’s hang that.
    //
    &:first-child {
        display: inline-block;
        text-indent: -0.22em;
    }

}



/*-------------------------------*/
/*    $NORMALIZE                 */
/*-------------------------------*/

b, strong, .bold, .strong{
    @extend %type_bold
}
dfn {
    @extend %type_italic;
}
small {
    @include type-font-size(modular-scale(-1), true, small);
}
sub,sup {
    font-size: 75%;
    line-height: 0;
    position: relative;
    vertical-align: baseline;}
sup {
    top: -0.5em;
}
sub {
    bottom: -0.25em;
}


