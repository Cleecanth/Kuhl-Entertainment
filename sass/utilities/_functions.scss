//------------------------------------
//    $Functions
//------------------------------------

 // CONTENTS
 // INTRODUCTION.........Explanation.
 // REFERENCE............List of functions and how to use them.
 // MATH.................Complex calculations and variables.
 // HELPERS..............Simple functions to fix some features missing in Sass.
 // TYPOGRAPHY...........Most often referenced from within type/_typography.scss.
 // MODULAR SCALE........Making typographic scaling more harmonious.
 // COLORS...............Calculating color differences.
 // LISTS................Mixins for easier control of lists.


//------------------------------------
//    $INTRODUCTION
//------------------------------------

// General functions to make Sass a little more powerful. Taken from various places.

//------------------------------------
//    $REFERENCE
//------------------------------------
//NOTE: Words in brackets[] represent values. Can either be strings, numbers, or variables depending on context.

 // exponent.......Exponentially multiply (cube, square, etc) a number.
 //                exponent([number-you-want-to-multiply], [exponent]);

 // pow............A more robust exponent multiplication which allows for decimal-based exponents.
 //    ............This replaces Compass' pow() function.
 //                pow([number-you-want-to-multiply], [exponent]);

 //gcd.............Greatest Common Divisor calculation
 //   .............(useful for calculating grids and widths)
 //                gcd([first-number], [second-number])

 //nth_root........Advanced calculation for squareroots, cuberoots, etc. of a value.
 //                nth_root([number-you-want-to-find-the-root-of], [root-divisor]);

 //sqrt............Find the square root of a value.
 //                sqrt([number-you-want-the-square-root-of]);

 //rand............Generate a random number.
 //                rand();

 // golden.........Generate the golden ratio.
 //                golden();

 // strip-units....Remove px,em,rem, etc. from a value. Usually a variable.
 //                strip-units([value-you-want-units-removed-from]);

 // opacity........MIXIN used to generate cross-browser opacity (including IE8)
 //                @include opacity([decimal-number-you-need-for-opacity]);

 // rems...........MIXIN used to generate rem value with a pixel fall-back
 //     ...........(only accepts pixel values).
 //                @include([property-you-want-to-give-a-value], [pixel-value]);

 // rems...........function used to generate rem values from pixels.
 //     ...........Accepts a base-font-size override for various media-query contexts.
 //                @include([pixel-value-you-need-converted], [base-font-size-override]);

 // str-contains...advanced function to parse a string for a value from a position.
 //     		   str-contains([string-you-need-parsed],[sub-string], [start-position]);

 // str-join......function to convert a list to a string.
 //     		   str-join([list-you-need-converted],[list-seperator]);

 //baseline-calc ..Used generating line-heights that line up to the baseline grid.
 //              ..Override recommended behavior with a boolean third value to gain
 //              ..most eye-pleasing values.
 //                baseline-calc([font-size-in-pixels], [base-font-size],
 //                              [override: true||false]);

 //type-font-size..MIXIN used for generating font-sizes and line-heights
 //              ..that line up to the baseline grid. Dependent on baseline-calc.
 //                @include([font-size-in-pixels]);

 //type-space......MIXIN used for generating spacing
 //          ......which cooresponds to the baseline grid.
 //          ......The values you enter should be value-less as they will be
 // 		 ......calculated as multiples.
 //@include type-space([property-you-want-to-give-a-value], [multiple-of-spacing]);

 //type-space-sc...MIXIN used for generating spacing for properties
 //             ...that accept shortcut values (e.g. padding: 2px 3px 4px 5px).
 //             ...The values you enter should be value-less
 //             ...as they will be calculated as multiples.
 //  @include type-space([property-you-want-to-give-a-value],
 //                      [top-value], [right-value],
 //                      [bottom-value], [left-value]);
 //  NOTE: This also accepts just a vertical(top) value and horizontal(right)-value. Assumes bottom = top, and left = right.

 //modular-scale...Generates a pixel value that is an exponent of a ratio
 //              ....(defaults to $scale-ratio value).
 //                modular-scale([number-on-the-scale-you-want],
 //                              [ratio-to-use-as-scale]);

 //type-scale......MIXIN for generating numbers for properties on
 //          ......the typographic scale (with a rem value and pixel fallback).
 //                @include type-scale([property-you-want-to-use],
 //                                    [number-on-the-scale]);

 //headings-scale..MIXIN for generating heading sizes on a typographic scale.
 //              ..Accepts any scale ratio.
 //                @include headings-scale([scale-you-want-to-base-font-sizes-on]);

 //type...........function for finding the value of an indexed type-size.
 //    ...........H1-H6, p, and small are all indexed values.
 //    ...........px, rem, and line-height are available.
 //               type([referenced-font-size],[font-size-value])

 //color..........function for grabbing colors as defined by $colors map.
 //	    ..........color([color-name], [optional-variation])

 //set-text-color..Generates either white or black based on the
 //              ..lightness of the color you pass it (Accepts HEX values).
 //                set-text-color([color-you-need-to-test-contrast-of]);

 //pick_best_color..Outputs the color with the highest contrast to the first color
 //               ..you pass it (Accepts multiple color options).
 //                 pick_best_color([color-you-need-to-test-contrast-of],
 //                                ([color-option-1], [color-option-2], [...])
 //                                );



//------------------------------------
//    $MATH
//------------------------------------

// All functions taken from SassyMath:
// https://github.com/Team-Sass/Sassy-math/blob/master/sass/math.scss

//Useful variables for calculating math functions
$pi: 3.1415926535897932384626433832795028841971693993751;
$π: $pi;
$e: 2.71828182845904523536028747135266249775724709369995;

$iter: 50;

// Exponent function (for square, cubes, etc.)
@function exponent($base, $exponent) {
  // reset value
  $value: $base;
  // positive intergers get multiplied
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base; } }
  // negitive intergers get divided. A number divided by itself is 1
  @if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base; } }
  // return the last value written
  @return $value;
}

//More advanced exponent function — very similar to Compass' pow() function, except all SASS-based.
@function pow($base, $exponent, $prec: 12) {
  // Handles decimal exponents by trying to convert them into a fraction and then use a nth_root-algorithm for parts of the calculation
  @if (floor($exponent) != $exponent) {
    $prec2 : pow(10, $prec);
    $exponent: round($exponent * $prec2);
    $denominator: gcd($exponent, $prec2);
    @return nth_root(pow($base, $exponent / $denominator), $prec2 / $denominator, $prec);
  }

  $value: $base;
  @if $exponent > 1 {
    @for $i from 2 through $exponent {
      $value: $value * $base;
    }
  } @else if $exponent < 1 {
    @for $i from 0 through -$exponent {
      $value: $value / $base;
    }
  }

  @return $value;
}
//Greatest Common Divisor
@function gcd($a, $b) {
  // From: http://rosettacode.org/wiki/Greatest_common_divisor#JavaScript
  @if ($b != 0) {
    @return gcd($b, $a % $b);
  } @else {
    @return abs($a);
  }
}
//Least common Multiple
//Use with caution...if there is no LCM, then you compilation will error out.
@function lcm($a, $b) {
	$a: round($a);
	$b: round($b);
	$gcd: gcd($a, $b);
	$result: ($a * $b) / $gcd;
	@return $result;
}


//Nth Root Function
@function nth_root($num, $n: 2, $prec: 12) {
  // From: http://rosettacode.org/wiki/Nth_root#JavaScript
  $x: 1;

  @for $i from 0 through $prec {
    $x: 1 / $n * (($n - 1) * $x + ($num / pow($x, $n - 1)));
  }

  @return $x;
}

//Random number generator.
@function rand() {
  @return 4;
}

//Square Root functions
@function sqrt($number) {
  $guess: rand();
  $root: $guess;
  @for $i from 1 through $iter {
    $root: $root - (pow($root, 2) - $number) / (2 * $root);
  }
  @return $root;
}
@function √($number) {
  @return sqrt($number);
}



//Golden Ratio generator.

@function golden() {
  @return 1/2 + sqrt(5) / 2;
}
@function ϕ() {
  @return golden();
}

$golden_ratio:  golden();

// Maths helpers.
// From https://github.com/inuitcss/tools.functions/blob/master/_tools.functions.scss
//
// Halve and double numbers, returning rounded integers. E.g.:
//
// .foo {
//     padding: halve(3.2px);
// }
//
// Outputs:
// .foo{padding: 2px;}
//
@function quarter($number) {
    @return round($number / 4);
}

@function halve($number) {
    @return round($number / 2);
}

@function double($number) {
    @return round($number * 2);
}

@function quadruple($number) {
    @return round($number * 4);
}

//------------------------------------
//    $HELPERS
//------------------------------------

// Strip units from a sass value
// Taken from:
// http://stackoverflow.com/questions/12328259/how-do-you-strip-the-unit-from-any-number-in-sass
@function strip-units($value) {
    @return $value / ($value * 0 + 1);
}

// Cross-browser (including IE) opacity
// Taken from:
// https://gist.github.com/jgv/745754
@mixin opacity($trans) {
//  filter: alpha(opactiy=($trans * 100));
//  -ms-filter: "progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$trans * 100})";
  -moz-opacity: $trans;
  -khtml-opacity: $trans;
  opacity: $trans;
}

//Stripped REM generator
//Useful if you just need the rem value
@function rems($size, $base-font:$base-font-size){
	@return px-to-rems($size, $base-font);
}

@function px-to-rems($size, $base-font:$base-font-size) {
	
	@if unitless($size){
		$size: $size * 1px;
	}

	$size: ($size / $base-font) * 1rem;

	@if $size == 0rem {
		$size: 0;
	}

	@return $size;

}

//String Helpers.
// Taken from: https://github.com/devatrox/Sunglass

//String-contains
@function str-contains($string, $substr, $pos: 0) {

	$string: str-slice($string, $pos);

	@if str-index($string, $substr) != null {
		@return true;
	}
	@else {
		@return false;
	}
}

//String Joining
@function str-join($list, $separator: ",") {
  $string: "";

  @for $i from 1 through length($list) {
    $string: _str-append($string, #{nth($list, $i)});

    @if $i != length($list) {
      $string: _str-append($string, $separator);
    }
  }

  @return $string;
}

// List contains check
// Outputs true/false
@function list-contains($list, $var) {
	@return index($list, $item) != null;
}

//Reverse a List
@function list-reverse($list, $recursive: false) {
   $result: ();

   @for $i from length($list)*-1 through -1 {
      @if type-of(nth($list, abs($i))) == list and $recursive {
        $result: append($result, reverse(nth($list, abs($i)), $recursive));
      }

      @else {
        $result: append($result, nth($list, abs($i)));
      }
   }

   @return $result;
}

//Map Helpers
//-----------------------------------
//Taken from: http://www.sitepoint.com/extra-map-functions-sass/

//Deep Set
//Update a deeply nested map key.
@function map-deep-set($map, $keys... /*, $value */) {
	$map-list: ($map,);
	$result: null;

	@if length($keys) == 2 {
		@return map-merge($map, (nth($keys, 1): nth($keys, -1)));
	}

	@for $i from 1 through length($keys) - 2 {
		$map-list: append($map-list, map-get(nth($map-list, -1), nth($keys, $i)));
	}

	@for $i from length($map-list) through 1 {
		$result: map-merge(nth($map-list, $i), (nth($keys, $i): if($i == length($map-list), nth($keys, -1), $result)));
	}

	@return $result;
}

//Map depth finder
// Returns a map's depth. Useful for debugging maps.
@function map-depth($map) {
	$level: 1;

	@each $key, $value in $map {
		@if type-of($value) == "map" {
			$level: max(map-depth($value) + 1, $level);
		}
	}

	@return $level;
}

//Check multiple map keys
@function map-has-keys($map, $keys...) {
	@each $key in $keys {
		@if not map-has-key($map, $key) {
			@return false;
		}
	}

	@return true;
}

@function map-contains-keys($map, $keys...){
	@return map-has-keys($map, $keys);
}

//Check for deep map keys
@function map-has-nested-keys($map, $keys...) {
	@each $key in $keys {
		@if not map-has-key($map, $key) {
			@return false;
		}

		$map: map-get($map, $key);
	}

	@return true;
}
@function map-contains-nested-keys($map, $keys...) {
	@return map-has-nested-keys($map, $keys);
}

//Get map value at nested or 'deep' key, per $keys list
@function map-get-nested($map, $keys...) {
	@each $key in $keys {
		@if type-of($map) != 'map' {
			@return $map;
		}
		$map: map-get($map, $key);
	}
	@return $map;
}

//Map Extend
// Similar to jQuery's extend function but for sass maps
// Takes two maps and merges their differences
@function map-extend($map, $maps... /*, $deep */) {
	$last: nth($maps, -1);
	$deep: $last == true;
	$max: if($deep, length($maps) - 1, length($maps));

	// Loop through all maps in $maps...
	@for $i from 1 through $max {
		// Store current map
		$current: nth($maps, $i);

		// If not in deep mode, simply merge current map with map
		@if not $deep {
			$map: map-merge($map, $current);
		} @else {
			// If in deep mode, loop through all tuples in current map
			@each $key, $value in $current {

				// If value is a nested map and same key from map is a nested map as well
				@if type-of($value) == "map" and type-of(map-get($map, $key)) == "map" {
					// Recursive extend
					$value: map-extend(map-get($map, $key), $value, true);
				}

				// Merge current tuple with map
				$map: map-merge($map, ($key: $value));
			}
		}
	}

	@return $map;
}

//------------------------------------
//    $TYPOGRAPHY
//------------------------------------

//Baseline function. Converts to floated integer.
@function baseline($font-size, $baseline){
	@return ceil($font-size / $baseline) * ($baseline) / $font-size;
}

//Calculate the least-common-denominator between a font-size and a baseline.
@function baseline-lcm($font-size, $line-height){
	$esl: $line-height * $font-size;
	@return lcm( $esl, $base-line-height );
}

// Calculate the baseline of any particular font-size.
@function baseline-calc(
	$font-size: $base-font-size,
	$font-base: $base-font-size,
	$calc-override: false){

	//Easiest measurement of font-size deviation
	$font-ratio: $font-size / $font-base;
	//baseline
	$bl: $type-magic-ratio * $font-base;
	//Every other line.
	$baseline-odd: $base-line-height / 2;
	//Every third line.
	$baseline-odder: $base-line-height / 1.33333;
	$baseline-cache: $bl;

	// Using half-baseline grid for first calculation.
	// This is helpful for smaller font-sizes
	// and gives more leeway with larger ones.

	$baseline: baseline($font-size, $baseline-odd);
    //If this produces either too small or large a line-height,
	// then let's make some corrections.
	// This will only work on fonts larger than the base-font-size unless
	// $calc-override is set to true.
	@if $font-size > $font-base or $calc-override == true {

		//First we can try using every third line.
		@if $baseline > 1.8 or $baseline <= 1.2{
				$baseline-cache: $baseline;
				$baseline: baseline($font-size, $baseline-odder);
		}
		@if $baseline < 1.1 or $baseline > 1.9{
			//If that's not working, let's see if
			// our original value is better by loosening our tolerance.
			@if $baseline-cache > 1.1 and $baseline-cache < 1.9{
				$baseline: $baseline-cache;
			}@else{
				//If both options are bad, then let's use the standard baseline.
				$baseline: baseline($font-size, $base-line-height);
			}
		}
	}
	@return $baseline;
}

// Quickly generate a font-size in rems, with a pixel fallback, based on the
// value we pass into the mixin, e.g.:
// h1 {
//     @include type-font-size(24px);
// }
// 1. Set the base element’s `font-size` to the value of your choosing. Set in
//    rems, assuming a browser default of 16px.
// 2. Work out the unitless `line-height` for your project based around your
//    desired `line-height` (defined previously in pixels), and your project’s
//    base font size.

@mixin type-font-size(
		$font-size,
		$line-height: true,
		$selector: '',
		$font-base: $base-font-size
	) {

	//Create REM-based font-size
	@include rems(font-size, $font-size);

	//Index values to type map.
	@if map_has_key($type, $selector) == true{
		$type: define-type($selector, px, $font-size) !global;
		$type: define-type($selector, rem, rems($font-size)) !global;
	}

    @if $line-height == true {

		$line-height: baseline-calc($font-size, $font-base);

		//Index line-height to type map.
		@if map_has_key($type, $selector) == true{
			$type: define-type($selector, line-height, $line-height) !global;
		}

		line-height: $line-height;
   }
}

 // Space elements by an amount based on your magic number. Pass in the property
 // to be indented as a paramater and the number of lines to use as an optional paramater, e.g.:
 // pre {
 //     @include type-space(padding-left, 1);
 // }

@mixin rems($property, $sizes, $important:false, $base-font: $base-font-size) {
	$important_val: '';
	$rem_sizes: null;
	$px_sizes: null;

	@if $important{
		$important_val: ' !important';
	}

	@each $size in $sizes {
		@if $size == ''{
			$size: null;
			$px_sizes: join($px_sizes, $size, space);
		}@else {
			@if $size == 0px{
				$size: 0;
			}

			$px_sizes: join($px_sizes, $size, space);
			$size: px-to-rems($size, $base-font);
		}
		$rem_sizes: join($rem_sizes, $size, space);
	};

	@if $rem-px-fallback {
		#{$property}: #{$px_sizes}#{$important_val};
	}
	#{$property}: #{$rem_sizes}#{$important_val};

}

//ALIAS: same as above
@mixin rems-to-px($property, $sizes, $important:false, $base-font: $base-font-size){
	@include rems($property, $sizes, $important, $base-font);
}

// Quickly generate a font-size in rems, with a pixel fallback, based on the
// value we pass into the mixin, e.g.:
// h1 {
//     @include type-font-size(24px);
// }
// 1. Set the base element’s `font-size` to the value of your choosing. Set in
//    rems, assuming a browser default of 16px.
// 2. Work out the unitless `line-height` for your project based around your
//    desired `line-height` (defined previously in pixels), and your project’s
//    base font size.

@mixin type-font-size(
		$font-size,
		$line-height: true,
		$selector: '',
		$font-base: $base-font-size
	) {

	//Create REM-based font-size
	@include rems(font-size, $font-size);

	@if $line-height == true {

		$line-height: baseline-calc($font-size, $font-base);
		line-height: $line-height;

		//Index line-height to type map.
		@if map_has_key($type, $selector){
			$type: define-type($selector, line-height, $line-height) !global;
		}
   }
   //Index values to type map.
   @if map_has_key($type, $selector){
	   $type: define-type($selector, px, $font-size) !global;
	   $type: define-type($selector, rem, rems($font-size)) !global;
   }
}
//AlIAS
@mixin font-size(
	$font-size,
	$line-height: true,
	$selector: '',
	$font-base: $base-font-size
){
	@include type-font-size($font-size, $line-height, $selector, $font-base);
}

 // Space elements by an amount based on line-height/gutter. Pass in the property
 // to be indented as a paramater and the number of lines to use as an optional paramater, e.g.:
 // pre {
 //     @include type-space(padding-left, 1);
 // }
 // Accepts multiple properties as a nested list.

@mixin type-space($properties, $multipliers.../*$important*/) {

	$important: false;
	$multiplier: nth($multipliers, 1);
	$m-length: length($multipliers);

	//Check if multiple arguments have been passed
	@if $m-length > 1 {
		//If so, see if the last argument is $important
		$important_check: nth($multipliers, -1);

		//If last value is $important, then set the $multiplier and $important accordingly
		@if type-of($important_check) == bool {
			$important: $important_check;
			$multiplier: nth($multipliers, 1);
			$m-length: 1;
		}
	}

	//If multiplier is only 1 value, then do expected stuff
	@if $m-length <= 1 {

		@each $property in $properties {

			$value: $multiplier * $type-magic-number;

			//if the value is for right or left spacing, use the gutter width for spacing.
			@if str-contains($property, 'right') or str-contains($property, 'left'){
				$value: $multiplier * $gutter;
			}

			@include rems($property, $value, $important);

		}
	//if many multipliers are passed in, then we know type-space-sc should be used
	}@else {

		$top: nth($multipliers, 1);
		$right: nth($multipliers, 2);
		$bottom: $top;
		$left: $right;

		@if $m-length > 2 {
			$bottom: nth($multipliers, 3);
			@if $m-length > 3 {
				$left: nth($multipliers, 4);
			}
		}
		@include type-space-sc($properties, $top, $right, $bottom, $left );
	}
}

// Same as above, but for shortcut properties.
// Use this for padding or margin shortcuts. e.g.:
// pre {
//    @include type-space(padding, 1, 2, 1, 0);
// }
@mixin type-space-sc($property, $top: 0, $right: 0, $bottom: $top, $left: $right) {

	//if top is given a list, then pass those values to the correct variables
	@if length($top) > 1 {
		$bottom: nth($top, 1);
		$right: nth($top, 2);
		$left: nth($top, 2);

		@if length($top) > 2 {
			$bottom: nth($top, 3);

			@if length($top) > 3 {
				$left: nth($top, 4);
			}
		}
		$top: nth($top, 1);
	}

	//Calculate values
	//Right and left get
	$top_val: $top * $base-line-height;
	$bottom_val: $bottom * $base-line-height;
	$right_val: $right * $gutter;
	$left_val: $left * $gutter;

	// Generating only the necessary properties, and leave the rest blank.
	// e.g. margin: 1px 3px; or margin: 2px 3px 1px;
	@if $right == $left or $left == null {
		$left_val: unquote('');

		@if $top == $bottom or $bottom == null {
			$bottom_val: unquote('');
		};
	};

	//Output px and rem values.
	@include rems($property, $top_val $right_val $bottom_val $left_val)

}

//Same as above, but in function form
@function type-space($multiplier: 2){
    @return $multiplier * $type-magic-number;
}
// Style any number of headings in one fell swoop, e.g.:
//
//   .foo{
//       @include headings(1, 3){
//           color:#BADA55;
//       }
//    }
//
// Lifted from inuit.css:
// github.com/csswizardry/inuit.css/blob/7dbc892f8d298795e19aeb64d1369ae3271561d1/generic/_mixins.scss

@mixin headings($from: 1, $to: 6){
    %base-heading {
        @content;
    }

    @if $from >= 1 and $to <= 6{
        @if $type-scale-classes == true{
            @for $i from $from through $to{
                h#{$i}, .h#{$i}, %h#{$i}{
                    @extend %base-heading;
                }
            }
        }@else{
            @for $i from $from through $to{
                h#{$i}, %h#{$i}{
                    @extend %base-heading;
                }
            }
        }
    }
}

//-------
// Cross-browser support for @font-face. Supports IE, Gecko, Webkit, Opera.
// http://compass-style.org/reference/compass/css3/font_face/
//-------
// $name is required, arbitrary, and what you will use in font stacks.
// $font-files is required using font-files('relative/location', 'format').
//  for best results use this order: woff, opentype/truetype, svg
// $eot is required by IE, and is a relative location of the eot file.
// $weight shows if the font is bold, defaults to normal
// $style defaults to normal, might be also italic
// To support iOS < 4.2, an SVG file must be provided
// If you need to generate other formats check out the Font Squirrel font generator

@mixin font-face($name, $font-files, $weight: false, $style: false, $eot: false) {
  $iefont: unquote("'#{$eot}?#iefix'");
  @font-face {
    font-family: quote($name);
    @if $eot {
      src: url($eot);
      $font-files: url($iefont) unquote("format('embedded-opentype')"), $font-files;
    }
    src: $font-files;
    @if $weight {
      font-weight: $weight;
    }
    @if $style {
      font-style: $style;
    }
  }
}

//------------------------------------
//    $MODULAR SCALE
//------------------------------------

// Modular scale function to scale type up or down.
@function modular-scale($i, $scale: $scale-ratio){
    $modular-scale: $scale;
    $stripped-base-font-size:  strip-units($base-font-size) !global;
    @return pow($modular-scale, $i)*($stripped-base-font-size) * 1px;
}

// This is essentially the same function as above,
// BUT it can be used externally.
// By using @include type-scale([property], [scale number]);.
// This is most useful for font sizing, but can be used for any property
// e.g.: div{
//          @include type-scale(margin-top, 2);}
// Would produce a margin-top value of the second value within your typographic scale.
// If your scale is set to 3,4, your output would be: div{margin-top: 20.63314px; margin-top: 1.4738rem;}

@mixin type-scale($property: font-size, $mod-scale-value: 1){
    @if $property == "font-size"{
        $font-size: modular-scale($mod-scale-value);
        @include type-font-size($font-size, true);
    }
    @else{
        $scale: modular-scale($mod-scale-value);
        #{$property}: $scale;
        #{$property}: ($scale / $base-font-size) * 1rem;
    }
}

@mixin headings_scale($scale: $scale_ratio, $name_space:"") {
	//Checking for floats in $scale
	@if length($scale) == 2 {
	// Making sure we don't have a ratio below 1.
		@if nth($scale,1) < nth($scale,2){
			$scale:   nth($scale, 2)/nth($scale, 1);
		}@else{
			$scale:   nth($scale, 1)/nth($scale, 2);
		}
	}
	@each $i in $type_headings {

		$font_size: modular_scale($i, $scale);
		$current_heading: nth($type_headings, $i);

		%#{$name_space}h#{$current_heading} {
			@include type_font_size($font_size, true);
			@extend %#{$name_space}space_b !optional;
		}

		@if $type_scale_classes == true {

			h#{$current_heading},
			.h#{$current_heading} {
				@extend %#{$name_space}h#{$current_heading};

				& + p {
					@extend %#{$name_space}negative_top !optional;
				}
			}
		}
		@else {
			h#{$current_heading} {
				@extend %h#{$current_heading};

				+ p{
					@extend %#{$name_space}negative_top !optional;
				}
			}
		}
		$i: $i + 1;
	}
}

//Get the property of a particular font. e.g.:
// h1{
//    font-size: type(h2, px)
// }
// Would return the pixel value of the h2 font-size.
@function type($font-size, $property: 'px') {
	@if $property == 'font-size'{
		$property: 'px';
	}
    @return map-get(map-get($type, $font-size), $property);
}


//Internal function used for definining the type map.
@function define-type($font-size, $property: 'px', $new-value: "") {
	$target_font: map-get($type, $font-size);
	$target-w-property: map-merge($target_font, ($property : $new-value));
	@return map-merge($type, ($font-size:$target-w-property));
}

//------------------------------------
//    $COLORS
//------------------------------------

// Blending modes
//====================================
// Uses similar formula's to photoshop's layer blending modes.
// See file for more documentation.
@import "../colors/blendmodes";

//Color map function
//====================================
// Get a color value from our color pallette. e.g.:
// div{
//	  background-color: colors(primary, light)
//}
@function colors($color, $tone: 'base') {
//	@debug "#{$color} #{$tone}";
    @return map-get(map-get($colors, $color), $tone);
}
//Same as above, but possibly more intuitively named
@function color($color, $tone: 'base') {
    @return colors($color, $tone);
}
//Shortname
@function clr($color, $tone: 'base') {
    @return colors($color, $tone);
}

// Output black or white
//====================================
// Change text color based on background-color's darkness, e.g.:
// div{
//    background-color: #f8cd12;
//    color: set_text_color(#f8cd12);
//    }
//  Your text color would be black because #f8cd12 and #00000 contain enough
//  contrast to be readable.
//  This will ONLY give you black or white.
// Use color: pick_best_color(#f00, (#fff, #ccc, #666)); for better control.
@function set-text-color($color) {
    @if (lightness( $color ) > 45) {
      @return #000000;
    }
    @else {
      @return #FFFFFF;
    }
}

//Pick best color
//====================================
//Complex color calculation to determine best color based on contrast.
//Taken from: https://gist.github.com/voxpelli/6304812
//USAGE:
// div{
//    background-color: #f8cd12;
//    color: pick_best_color(#f8cd12, (#a0a0c0, #fff, #2c2c2c));
//    }
// The function would test the colors and find that #2c2c2c is the best.

@function pick-best-color($base, $colors, $tolerance: 0) {
  $contrast: color-contrast($base, nth($colors, 1));
  $best: nth($colors, 1);

  @for $i from 2 through length($colors) {
    $current_contrast: color-contrast($base, nth($colors, $i));
    @if ($current_contrast - $contrast > $tolerance) {
      $contrast: color-contrast($base, nth($colors, $i));
      $best: nth($colors, $i);
    }
  }
  @return $best;
}


//Find a color's luminance
//===============================
// Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
// Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
@function color-luminance($color) {

  $rgba: red($color), green($color), blue($color);
  $rgba2: ();

  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;

    $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));

    $rgba2: append($rgba2, $rgb);
  }

  @return .2126 * nth($rgba2, 1) + .7152 * nth($rgba2, 2) + 0.0722 * nth($rgba2, 3);
}

//Calculate contrast between two colors
//===============================
@function color-contrast($color1, $color2) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  $luminance1: color-luminance($color1) + .05;
  $luminance2: color-luminance($color2) + .05;
  $ratio: $luminance1 / $luminance2;

  @if $luminance2 > $luminance1 {
    $ratio: 1 / $ratio;
  }

  $ratio: round($ratio * 10) / 10;

  @return $ratio;
}

//------------------------------------
//    $LISTS
//------------------------------------
// http://compass-style.org/reference/compass/typography/lists/
// Turn off the bullet for an element of a list

@mixin no-bullet {
  list-style-image : none;
  list-style-type  : none;
  margin-left      : 0;
}

// turns off the bullets for an entire list
@mixin no-bullets {
  list-style: none;
  > li { @include no-bullet; }
}

// Make a list(ul/ol) have an image bullet.
//
// The mixin should be used like this for an icon that is 5x7:
//
//     ul.pretty
//       +pretty-bullets("my-icon.png", 5px, 7px)
//
// Additionally, if the image dimensions are not provided,
// The image dimensions will be extracted from the image itself.
//
//     ul.pretty
//       +pretty-bullets("my-icon.png")
//
@mixin pretty-bullets(
	$bullet-icon,
	$width: image-width($bullet-icon),
	$height: image-height($bullet-icon),
	$line-height: $base-line-height,
	$padding:
	$type-magic-number) {

  margin-left: 0;
  li {
    padding-left: $padding;
    background: image-url($bullet-icon) no-repeat ($padding - $width) / 2 ($line-height - $height) / 2;
    list-style-type: none;
  }
}

//------------------------------------
//	$TRIANGLES
//------------------------------------
@mixin triangle($direction:'up', $size: 6px, $color: #222) {
	@extend %content_blank;
	@extend %absolute;
	height: 0;
	width: 0;

	@if ($direction == 'up') {
		border-bottom: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'down') {
		border-top: $size solid $color;
		border-left: 1/2*$size solid transparent;
		border-right: 1/2*$size solid transparent;
	}
	@else if ($direction == 'left') {
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-right: $size solid $color;
	}
	@else if ($direction == 'right') {
		border-top: 1/2*$size solid transparent;
		border-bottom: 1/2*$size solid transparent;
		border-left: $size solid $color;
	}
	@else if ($direction == 'none') {
		border: 0;
	}
}

@mixin fluid-ratio($large-size, $small-size) {
	$width-large: nth($large-size, 1);
	$width-small: nth($small-size, 1);
	$height-large: nth($large-size, 2);
	$height-small: nth($small-size, 2);
	$slope: ($height-large - $height-small) / ($width-large - $width-small);
	$height: $height-small - $width-small * $slope;

	padding-top: $slope * 100%;
	height: $height;

	background-size: cover;
	-moz-background-size: cover;  /* Firefox 3.6 */
	background-position: center;  /* Internet Explorer 7/8 */
}